use super::{skill::Cooldown, Item, Pet, Skill};
use sqlx::{postgres::PgRow, FromRow, Row};
use std::collections::HashMap;

pub struct Character {
    pub id: i32,
    pub account_id: i32,
    pub world_id: i32,
    pub name: String,
    pub level: i16,
    pub exp: i32,
    pub gacha_exp: i32,
    pub str: i16,
    pub dex: i16,
    pub luk: i16,
    pub int: i16,
    pub hp: i16,
    pub mp: i16,
    pub max_hp: i16,
    pub max_mp: i16,
    pub mesos: i32,
    pub job: i16,
    pub skin_colour: i16,
    pub gender: i16,
    pub fame: i16,
    pub hair: i32,
    pub face: i32,
    pub ap: i16,
    pub sp: String,
    pub map: i32,
    pub spawn_point: i16,
    pub gm: i16,
    pub rank: i32,
    pub rank_move: i32,
    pub job_rank: i32,
    pub job_rank_move: i32,
    pub monster_book_cover: i32,

    pub pets: Vec<Pet>,
    pub skills: Vec<Skill>,
    pub cooldowns: Vec<Cooldown>,
    pub equip_inventory: HashMap<i16, Item>,
    pub use_inventory: HashMap<i16, Item>,
    pub setup_inventory: HashMap<i16, Item>,
    pub etc_inventory: HashMap<i16, Item>,
    pub cash_inventory: HashMap<i16, Item>,
}

impl FromRow<'_, PgRow> for Character {
    fn from_row(row: &PgRow) -> Result<Self, sqlx::Error> {
        Ok(Self {
            id: row.try_get("id")?,
            account_id: row.try_get("account_id")?,
            world_id: row.try_get("world_id")?,
            name: row.try_get("name")?,
            level: row.try_get("level")?,
            exp: row.try_get("exp")?,
            gacha_exp: row.try_get("gacha_exp")?,
            str: row.try_get("str")?,
            dex: row.try_get("dex")?,
            luk: row.try_get("luk")?,
            int: row.try_get("int")?,
            hp: row.try_get("hp")?,
            mp: row.try_get("mp")?,
            max_hp: row.try_get("max_hp")?,
            max_mp: row.try_get("max_mp")?,
            mesos: row.try_get("mesos")?,
            job: row.try_get("job")?,
            skin_colour: row.try_get("skin_colour")?,
            gender: row.try_get("gender")?,
            fame: row.try_get("fame")?,
            hair: row.try_get("hair")?,
            face: row.try_get("face")?,
            ap: row.try_get("ap")?,
            sp: row.try_get("sp")?,
            map: row.try_get("map")?,
            spawn_point: row.try_get("spawn_point")?,
            gm: row.try_get("gm")?,
            rank: row.try_get("rank")?,
            rank_move: row.try_get("rank_move")?,
            job_rank: row.try_get("job_rank")?,
            job_rank_move: row.try_get("job_rank_move")?,
            monster_book_cover: row.try_get("monster_book_cover")?,
            pets: Vec::new(),
            skills: Vec::new(),
            cooldowns: Vec::new(),
            equip_inventory: HashMap::new(),
            use_inventory: HashMap::new(),
            setup_inventory: HashMap::new(),
            etc_inventory: HashMap::new(),
            cash_inventory: HashMap::new(),
        })
    }
}
